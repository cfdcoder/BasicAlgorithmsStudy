package study;

public class HeapSort2 {
int[] Arr;
    
    HeapSort(int[] A){
    	this.Arr=A.clone();
    }
    
    //heap index start from 1, so if the parentIndex is i, the leftIndex is 2*i, and rightIndex is 2*i+1, 
    private static int left(int i){
        return 2*i;
    }
     
    private static int right(int i){
        return 2*i + 1;
    }
     
    public static void maxHeapify(int[] data, int i, int heapSize){
         
        int l = left(i);
        int r = right(i);
        int largest;
         
        if(l < heapSize && data[l] > data[i]){
            largest = l;
        }else{
            largest = i;
        }
         
        if(r < heapSize && data[r] > data[largest]){
            largest = r;
        }
         
        if(largest != i){
            swap(data,i,largest);
            maxHeapify(data, largest, heapSize);
        }
    }
     
    public static void buildMaxHeap(int[] data){
        int heapSize = data.length;
         
        for(int i = heapSize/2; i >=0; i--){
            maxHeapify(data, i, heapSize);
        }
    }
     
    public static void heapSort(int[] data){
        int heapSize = data.length;
         
        buildMaxHeap(data);
        System.out.println("Max heap built is:");
        outputArray(data);//check if the heap is correct
        for(int i = heapSize - 1; i > 0; i--){
            swap(data,0,i);//equivalent to swap(heapData,1,i);
            heapSize = heapSize - 1;
            maxHeapify(data, 0, heapSize);//equivalent to maxHeapify(heapData, 1, heapSize);
        }
    }
     
    public static void swap(int[] data, int i, int j) {
        int temp = data[i];
        data[i] = data[j];
        data[j] = temp;
    }
	
    public static void outputArray(int A[]) {
		for (int i = 0; i < A.length; i++) {
			System.out.print(A[i] + ", ");
		}
		System.out.println(" ");
	}
    
    
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] Array = { 7,3,7,9,5,2,5};
		HeapSort HS=new HeapSort(Array);
		HS.heapSort(HS.Arr);
        HS.outputArray(HS.Arr);
	}

}
