package study;

import edu.princeton.cs.algs4.Graph;
import library.In;
import library.StdOut;
import library.Graph;

public class DepthFirstSearch {
    private boolean[] marked; //marked[v]== is there an path from source-vertice to other-vertices
    private int count;//number of vertices connected to source vertex
    
    public DepthFirstSearch(Graph G, int s){
          marked=new boolean[G.V()];
          dfs(G,s);
    }
    
    private void dfs(Graph G, int v){
    	count++;
    	marked[v]=true;
    	for(int w: G.adj(v)){
    		if(!marked[w])
    			dfs(G,w);
    	}
    }
    
    public boolean marked(int v) {
        return marked[v];
    }
    
    public int count() {
        return count;
    }
    
    
    
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		In in = new In(args[0]);
        Graph G = new Graph(in);
        int s = Integer.parseInt(args[1]);
        DepthFirstSearch search = new DepthFirstSearch(G, s);
        for (int v = 0; v < G.V(); v++) {
            if (search.marked(v))
                StdOut.print(v + " ");
        }

        StdOut.println();
        if (search.count() != G.V()) StdOut.println("NOT connected");
        else                         StdOut.println("connected");
	}

}
