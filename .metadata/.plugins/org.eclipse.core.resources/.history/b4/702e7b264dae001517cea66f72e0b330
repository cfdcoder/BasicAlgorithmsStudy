package study;

public class QuickSort {
    int[] Arr;
    int countQS;
    //constructor
    QuickSort(int[] A){
    	this.Arr=A;
    	this.countQS=0;
    }
    //get pivot index with smaller elements on the left and bigger elements on the right
    public static int partition(int[] A, int lo, int hi){
        int pivot=A[hi];
        int pIndex=lo;
        for(int i=lo;i<hi;i++){
        	if(A[i]<=pivot){
        		swap(A[i],A[pIndex]);
        		pIndex=pIndex+1;
        	}
        }
        swap(A[pIndex], A[hi]);
        return pIndex;
    }
    	
    public static void sort(int[] A, int lo, int hi){
    	if(lo<hi){
    		int p = partition(A, lo, hi);
    		sort(A, lo, p-1);
    		sort(A, p+1, hi);
    	}
    }
    
    //exchange two numbers
    private static void swap(int x, int y){
    	int temp;
    	temp=x;
    	x=y;
    	y=temp;
    }
	
      
    public void outputArray(int A[]) {
		for (int i = 0; i < A.length; i++) {
			System.out.print(A[i] + ", ");
		}
	}

	public void outputQuickCounts() {
		System.out.println(" ");
		System.out.println("num of merge executions: " + this.countQS);
	}

	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] Array = { 23, 31, 1, 21, 36, 72 };
		
		QuickSort qs = new QuickSort(Array);
		QuickSort.sort(qs.Arr, 0, qs.Arr.length-1);
		
		qs.outputArray(qs.Arr);
		qs.outputQuickCounts();
		
	}

}
