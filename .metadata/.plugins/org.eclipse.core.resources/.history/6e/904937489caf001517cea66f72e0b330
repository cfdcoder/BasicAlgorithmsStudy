package study;
/**
 * this is the heap sort implementation: 
 * */
public class HeapSort {
    int[] Arr;
    int heapSize;
    HeapSort(int[] A){
    	this.Arr=A.clone();
    }
    
    private static int left(int i){
        return 2*i;
    }
     
    private static int right(int i){
        return 2*i + 1;
    }
     
    public static void maxHeapify(int[] data, int i, int heapSize){
         
        int l = left(i);
        int r = right(i);
        int largest;
         
        if(l < heapSize && data[l] > data[i]){
            largest = l;
        }else{
            largest = i;
        }
         
        if(r < heapSize && data[r] > data[largest]){
            largest = r;
        }
         
        if(largest != i){
            swap(data,i,largest);
            maxHeapify(data, largest, heapSize);
        }
    }
     
    public static void buildMaxHeap(int[] data){
        int heapSize = data.length;
         
        for(int i = heapSize/2; i >= 0; i--){
            maxHeapify(data, i, heapSize);
        }
    }
     
    public static void heapSort(int[] data){
        int heapSize = data.length;
         
        buildMaxHeap(data);
        for(int i = heapSize - 1; i > 0; i--){
            swap(data,0,i);
            heapSize = heapSize - 1;
            maxHeapify(data, 0, heapSize);
        }
    }
     
    public static void swap(int[] data, int i, int j) {
        int temp = data[i];
        data[i] = data[j];
        data[j] = temp;
    }
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] Array = { 7, 1, 9, 5, 0, 3};
		HeapSort HS=new HeapSort(Array);
		heapSort(Array);
        for(int i = 0; i < Array.length; i++) {
            System.out.print(Array[i] + " ");
        }
		
	}

}
