package study;

public class MergeSort2 {
    int[] Arr;
    MergeSort2(int[] A){
    	this.Arr=A.clone();
    }
    public void MergeSort(int[] A){
    	int n=A.length;
    	if(n<2) return;
    	int mid=n/2;
    	int[] left=new int[mid];
    	int[] right=new int[n-mid];
    	for(int i=0;i<mid;i++){
    		left[i]=A[i];
    	}
    	for(int j=0;j<(n-mid);j++){
    		right[j]=A[mid+j];
    	}
    	MergeSort(left);
    	MergeSort(right);
    	Merge(left,right,A);	
    }
    
    private void Merge(int[] L, int[] R, int[] A){
    	int nL=L.length;
    	int nR=R.length;
    	int i=0, j=0, k=0;
    	while(i<nL && j<nR){
    		if(L[i]<=R[j]){
    			A[k]=L[i];
    			k++;
    			i++;
    		}else{
    			A[k]=R[j];
    			k++;
    			j++;
    		}
    		k++;
    	}
    	//check leftovers on the left
    	while(i<nL){
    		A[k]=L[i];
    		i++;
    		k++;
    	}
    	//check leftovers on the right
    	while(j<nR){
    		A[k]=R[j];
    		j++;
    		k++;
    	}
    }
    
    public void outputArray(int A[]) {
		for (int i = 0; i < A.length; i++) {
			System.out.print(A[i] + ", ");
		}
	}
    
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] Array = { 0, 1, 3, 5, 7, 9, 15, 13};
		System.out.println("Initial array length: "+Array.length);
		MergeSort2 sort = new MergeSort2(Array);
		sort.MergeSort(sort.Arr);
		sort.outputArray(sort.Arr);
	}

}
