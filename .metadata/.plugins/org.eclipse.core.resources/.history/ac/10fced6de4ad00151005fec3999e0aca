package study;

public class QuickSort {
    int[] Arr;
    int countQS;
    QuickSort(int[] A){
    	Arr=A;
    	countQS=0;
    }
    //get pivot from subarray
    public static int partition(int[] A, int lo, int hi){
    	int pivot=A[lo];
    	int[] left = null;
    	
    	int j=0;
       for(int i=lo;i<hi;i++){
    	   if (A[i]<pivot){
    		   left[j]=A[i];
    	       j++;
    	   }
       }
        int indexPivot=i++;
        return indexPivot;
    }
	
    public static void quickSort(int[] A, int lo, int hi){
    	if(lo==hi) return;
    	else{
    		int p=partition(A, lo, hi);
    	    quickSort(A, lo, p);
    	    quickSort(A,p+1, hi);
    	}
    }
    
    public void outputArray(int A[]) {
		for (int i = 0; i < A.length; i++) {
			System.out.print(A[i] + ", ");
		}
	}

	public void outputQuickCounts() {
		System.out.println(" ");
		System.out.println("num of merge executions: " + this.countQS);
	}

	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] Array = { 0, 1, 3, 5, 7, 9, 15, 13, 11, 2, 4, 6, 8, 10, 14, 12 };
		QuickSort qs = new QuickSort(Array);
		qs.quickSort(qs.Arr, 0, qs.Arr.length-1);
		qs.outputArray(qs.Arr);
		qs.outputQuickCounts();
		
	}

}
