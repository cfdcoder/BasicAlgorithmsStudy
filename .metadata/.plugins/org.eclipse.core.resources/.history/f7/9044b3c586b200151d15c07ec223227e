package study;

public class RBTree<T extends Comparable<T>> {
    private RBNode<T> Root;

    
    public RBTree(){
    	Root=null;
    }
    
    private RBNode<T> parent(RBNode<T> node){
    	if (node!=null){
    		return node.parent;
    	}else{
    		return null;
    	}
    }
    
    private NodeColor getColor(RBNode<T> node){
    	if(node!=null)
    		return node.color;
    	else
    		return null;
    }
    
    private boolean isRed(RBNode<T> node){
    	if(node!=null && node.color==NodeColor.red){
    		return true;
    	}else
    		return false;
    }
    
    private boolean isBlack(RBNode<T> node){
    	if(node!=null && node.color==NodeColor.black){
    		return true;
    	}else
    		return false;
    }
    
    private void setRed(RBNode<T>node){
    	if(node!=null)
    		node.color=NodeColor.red;
    }
    
    private void setBlack(RBNode<T>node){
    	if(node!=null)
    		node.color=NodeColor.black;
    }
    
    private void setParent(RBNode<T>node, RBNode<T>parent){
    	if(node!=null)
    		node.parent=parent;
    }
    
    //pre order traverse
    private void preOrder(RBNode<T> tree){
    	if(tree!=null){
    		System.out.println(tree.key+" ");
    		preOrder(tree.left);
    		preOrder(tree.right);
    	}
    }
    
    public void preOrder(){
    	preOrder(Root);
    }
    
    //in order traverse
    private void inOrder(RBNode<T> tree){
    	if(tree!=null){
    		inOrder(tree.left);
    		System.out.println(tree.key+" ");
    		inOrder(tree.right);
    	}
    }
    
    public void inOrder(){
    	inOrder(Root);
    }
    
    //post order traverse
    private void postOrder(RBNode<T> tree){
    	if(tree!=null){
    		postOrder(tree.left);
    		postOrder(tree.right);
    		System.out.println(tree.key+" ");
    	}
    }
    
    public void postOrder(){
    	postOrder(Root);
    }
    
    //recursive search 
    private RBNode recursiveSearch(RBNode<T> x, T key){
    	if(x==null) return null;
    	int cmp=key.compareTo(x.key);
    	if(cmp<0)
    		return recursiveSearch(x.left,key);
    	else if(cmp>0)
    		return recursiveSearch(x.right, key);
    	else
    		return x;
    }
    
    public RBNode<T> recursiveSearch(T key){
    	return recursiveSearch(Root, key);
    }
    
    //iterative search 
    private RBNode<T> iterativeSearch(RBNode<T> x, T key){
    	while(x!=null){
    		int cmp=key.compareTo(x.key);
    		if(cmp<0) x=x.left;
    		else if(cmp>0) x=x.right;
    		else return x;
    			
    	}
    	return x;
    }
    
    public RBNode<T> iterativeSearch(T key){
    	return iterativeSearch(Root, key);
    }
    
    //find the minimum of tree
    private RBNode<T> min(RBNode<T> tree){
    	if(tree==null) return null;
    	while(tree.left!=null)
    		tree=tree.left;
    	
    	return tree;
    }
    
    public T minimum(){
    	RBNode<T> p=min(Root);
    	if(p!=null)
    		return p.key;
    	
    	return null;
    }
    
    //find the maximum of tree
    private RBNode<T> max(RBNode<T> tree){
    	if(tree==null) return null;
    	while(tree.right!=null)
    		tree=tree.right;
    	
    	return tree;
    }
    
    public T maximum(){
    	RBNode<T> p=max(Root);
    	if(p!=null)
    		return p.key;
    	
    	return null;
    }
    
    //find the minimum(leftmost) child bigger than current node: successor
    public RBNode<T> successor(RBNode<T> x){
    	//case 1
    	//if node x has right child, then the successor is the leftmost child bigger than the subtree rooted at the node of x.right
    	if(x.right!=null)
    		return min(x.right);
    	//case 2
    	//if node x has no right child
    	//case 2.1: if x is a left leaf, its successor is the immediate parent node
    	RBNode<T> y1=x.parent;
    	if(x==y1.left && x.right==null && x.left==null)
    		return y1;
    	
    	//case 2.2: if x is a right leaf, its successor is a parent node (upward in the tree)(also an lowest ancestor) whose leftchild is an ancestor
    	
    }
    
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}

class RBNode<T extends Comparable <T>>{
	public NodeColor color;
	T key;
	RBNode<T> left;
	RBNode<T> right;
	RBNode<T> parent;
	
	public RBNode(T key, NodeColor color, RBNode<T>parent, RBNode<T>left, RBNode<T>right){
		this.key=key;
		this.color=color;
		this.parent=parent;
		this.left=left;
		this.right=right;
	}
	
	public T getKey(){
		return key;
	}
	
	public String toString(){
		return " "+key+this.color+" ";
	}
	
}


enum NodeColor{
	red, black;
}
