package study;

public class HeapSort {
    int[] Arr;
    
	private void BuildMaxHeap(int[] A){
		int 
	}
	
    private void BuildMinHeap(int[] A){
		
	}
	
	private void MinHepify(){
		
	}
	
	private void MaxHeapify(int[] A, int index){
		int largest;
		int left=GetLeftChildIndex(index);
		int right=GetRightChildIndex(index);
		if(left<=A.length && A[left]>A[index])
			largest=left;
		else
			largest=index;
		
		if(right<=A.length && A[right]>A[largest])
			largest=right;
		
		if(largest!=index){
			Exchange(A, index, largest);
			MaxHeapify(A, largest);
		}
	}
	
	private void Exchange(int[] A, int x, int y){
		int temp=A[x];
		A[x]=A[y];
		A[y]=A[x];
	}
	
	private void DeleteRoot(){
		
	}
	
	private int GetParentIndex(int index){
		return (index/2);
	}
	
	private int GetLeftChildIndex(int index){
		return (index*2);
	}
	
	private int GetRightChildIndex(int index){
		return (index*2+1);
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
